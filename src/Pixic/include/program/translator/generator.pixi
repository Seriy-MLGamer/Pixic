/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/generator.pixi
 *
 * Include before.
 * program/console/console parser.pixi
 * program/translator/Parser.pixi
 * configuration.pixi
 * program/translator/tokens/show.pixi
 * Dependencies.
 * program/info/errors.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/Function_text.pixi
 * program/info/developer errors.pixi
 */

if input<0
{
	parser=Parser_new("boot.pixi")
	if parser<0
	{
		parser=Parser_new("boot.txt")
		if parser<0
		{
			error_cant_open_input_undefined()
		}
	}
}
else
{
	parser=Parser_new(input)
	if parser<0
	{
		error_cant_open_input()
	}
}
if show_only
{
	tokens=Parser_parse(parser)
	if tokens.first<0
	{
		error_empty_input()
	}
	begin_array()
		a=tokens.first while 1
		{
			indent() a.f.show(a)
			if a.next<0
			{
				break
			}
				next_property()
			a=a.next
		}
	end_array() logf("\n")
	exit(0)
}
if !translate_only
{
	create_directory(PIXIC_TEMP_PATH)
}
C_file_name=get_real_path2(folder)
create_directory(C_file_name)
strcat(C_file_name, "/main.c")
C_file=fopen(C_file_name, "wb")
if !C_file
{
	error_cant_open_C()
}
tokens=Parser_parse(parser)
if tokens.first<0
{
	fclose(C_file)
	error_empty_input(input)
}
functions=new(1, 1, INT8)
constants=new(1, 1, INT8)
strings=new(1, 1, INT8)
variables=new(1, 1, INT8)
functions_texts=Stack_new(INT)
functions[0]=0
functions_record=fopen_mem(functions, "wb")
constants[0]=0
constants.count=0
constants_record=fopen_mem(constants, "wb")
strings[0]=0
strings.count=0
strings_record=fopen_mem(strings, "wb")
Stack_push(functions_texts, Function_text_new())
fputc('\t', constants_record)
a=tokens.first while a>=0
{
	next=a.next
	a.f.generate(a)
	a.f.remove(a)
	a=next
}
if functions_texts.top
{
	generator_deinit()
	developer_error_nonempty_stack("generating of C file")
}
function_text=Stack_get(functions_texts)
generator_deinit(1)
remove(functions_texts)
remove(tokens)
fputs("#include <Pixic/Pixic.h>

#include <stdarg.h>

", C_file)
tokens=get_proplist(functions)
if tokens>=0
{
	tokens_count=get_size(tokens)
	for (a=0; a!=tokens_count; a+1)
	{
		fprintf(C_file, "Var pf%s(uint32_t arguments_count, ...);\n", tokens[a])
	}
	remove_proplist(tokens)
}
if constants.count
{
	fprintf(C_file, "Var pc[%u];\n", constants.count)
}
if strings.count
{
	fprintf(C_file, "Var ps[%u];\n", strings.count)
}
tokens=get_proplist(variables)
if tokens>=0
{
	fputs("Var ", C_file)
		tokens_count=get_size(tokens)-1
		a=0 while 1
		{
			fputs("pv", C_file)
			fputs(tokens[a], C_file)
			if a==tokens_count
			{
				break
			}
			fputs(", ", C_file)
			a+1
		}
		fputs(";\n", C_file)
}
fputs(functions, C_file)
fputs("void app()
{
", C_file)
	if constants.count
	{
		fputs(constants, C_file)
		fputc('\n', C_file)
	}
	fputs(strings, C_file)
	if tokens>=0
	{
		fputc('\t', C_file)
			a=0 while 1
			{
				fprintf(C_file, "pv%s=Var_new(0);", tokens[a])
				if a==tokens_count
				{
					break
				}
				fputc(' ', C_file)
				a+1
			}
			fputc('\n', C_file)
		remove_proplist(tokens)
	}
	tokens=get_proplist(function_text.locals)
	if tokens>=0
	{
		fputs("\tVar ", C_file)
			tokens_count=get_size(tokens)-1
			a=0 while 1
			{
				fprintf(C_file, "pl%s", tokens[a])
				if a==tokens_count
				{
					break
				}
				fputs(", ", C_file)
				a+1
				
			}
			fputs(";\n", C_file)
		remove_proplist(tokens)
	}
	fputs(function_text.statements, C_file)
fputc('}', C_file)
fclose(C_file)

fn generator_deinit($success)
{
	fclose(functions_record)
	fclose(constants_record)
	fclose(strings_record)
	$size=functions_texts.top+1
	if $0<1
	{
		for ($a=0; $a!=$size; $a+1)
		{
			Function_text_close(functions_texts[$a])
			//Function_text_remove(functions_texts[$a])
		}
		fclose(C_file)
	}
	else
	{
		Function_text_close(functions_texts[0])
	}
}