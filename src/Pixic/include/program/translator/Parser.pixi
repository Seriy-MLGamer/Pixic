/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/Parser.pixi
 * class Parser;
 * The parser of Pixilang source file.
 *
 * Include before.
 * program/translator/tokens/operators.pixi
 * Dependencies.
 * core/strings/file name.pixi
 * program/translator/character filters.pixi
 * core/structures/linked list/Twoended_list.pixi
 * program/info/developer errors.pixi
 * program/translator/tokens groups.pixi
 * program/info/syntax errors.pixi
 * core/structures/linked list/List_node.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/tokens/operands/Binary_operator.pixi
 */

/**
 * class Parser;
 * The parser of Pixilang source file.
 * @param $file_name the name of the Pixilang source file.
 * @return an instance of the Parser class or -1 on error.
 * @see Parser_parse()
 * @see Parser_parse_multiple()
 * @see Parser_parse_operand()
 * @see Parser_parse_parenthesis()
 * @see Parser_parse_expression()
 * @see Parser_skip_spaces()
 * @see Parser_get()
 * @see Parser_promise_position()
 * @see Parser_resolve_position()
 * @see Parser_reject_position()
 * @see Parser_remove()
 */
fn Parser_new($file_name)
{
	$full_file_name=get_real_path2($file_name)
	$file=fopen($full_file_name, "rb")
	remove($full_file_name)
	if !$file
	{
		ret(-1)
	}
	$self=new(2, 1, INT)

	$self.file_name=$file_name
	fseek($file, 0, SEEK_END)
	$length=ftell($file)
	if $length
	{
		$text=new($length, 1, INT8)
		fseek($file, 0, SEEK_SET)
		fread($text, $length, $file)
		$self.text=$text
		$lines=new(3, 1, INT)
		clean($lines)
		$state=0
		$environment=new(1, 1, INT8)
		$environment.line=0
		$environment.real_line=0
		for ($a=0; $a!=$length; $a+1)
		{
			$state=Parser_new_jump0[$state]($text[$a]&0xFF, $a, $lines, $environment)
		}
		if $state==2
		{
			$lines[1, $environment.line]=$a
		}
		$self.lines=$lines
		remove($environment)
		$self.top=0
		$self[0]=$lines[0, 0]
		$self[1]=0
	}
	else
	{
		$self.text=-1
		$self.lines=-1
		$self.top=-1
	}
	fclose($file)

	ret($self)
}
Parser_new_jump0=new(4, 1, INT)
Parser_new_jump0[0]=
{
	if $1=='\n'
	{
		$4.real_line+1
		ret(0)
	}
	if $1=='\r'
	{
		$4.real_line+1
		ret(1)
	}
	if is_spatial($1)
	{
		ret(0)
	}
	$line=$4.line
	resize($3, 3, $line+1)
	$3[0, $line]=$2
	$3[2, $line]=$4.real_line+1
	ret(2)
}
Parser_new_jump0[1]=
{
	if $1=='\r'
	{
		$4.real_line+1
		ret(1)
	}
	if is_spatial($1)
	{
		ret(0)
	}
	$line=$4.line
	resize($3, 3, $line+1)
	$3[0, $line]=$2
	$3[2, $line]=$4.real_line+1
	ret(2)
}
Parser_new_jump0[2]=
{
	if $1=='\n'
	{
		$3[1, $4.line]=$2
		$4.line+1
		$4.real_line+1
		ret(0)
	}
	if $1=='\r'
	{
		$3[1, $4.line]=$2
		$4.line+1
		$4.real_line+1
		ret(1)
	}
	if is_spatial($1)
	{
		$3[1, $4.line]=$2
		ret(3)
	}
	ret(2)
}
Parser_new_jump0[3]=
{
	if $1=='\n'
	{
		$4.line+1
		$4.real_line+1
		ret(0)
	}
	if $1=='\r'
	{
		$4.line+1
		$4.real_line+1
		ret(1)
	}
	if is_spatial($1)
	{
		ret(3)
	}
	ret(2)
}
/**
 * Parse it!
 * @param $self
 * @return a Twoended_list object with a list of Pixilang statements tokens.
 * @see Parser_get()
 * @see Parser_new()
 */
fn Parser_parse($self)
{
	$statements=Twoended_list_new()
	while 1
	{
		if Parser_skip_spaces($self)
		{
			if $self.top
			{
				developer_error_nonempty_stack("parsing")
			}
			ret($statements)
		}
		$statement=Parser_parse_multiple($self, STATEMENTS)
		if $statement<0
		{
			syntax_error_invalid_statement($self)
		}
		List_node_set_to_twoended($statement, $statements)
	}
}
/**
 * Parse one of the tokens from the given tokens constructors array. Lower index means higher priority.
 * @param $self
 * @param $tokens_array the tokens constructors array.
 * @return a first parsed token object or -1, if none of the tokens have been found.
 * @see Parser_parse()
 * @see Parser_new()
 */
fn Parser_parse_multiple($self, $tokens_array)
{
	$size=get_size($tokens_array)
	for ($a=0; $a!=$size; $a+1)
	{
		$result=$tokens_array[$a]($self)
		if $result>=0
		{
			ret($result)
		}
	}
	ret(-1)
}
/**
 * Parse an operand.
 * @param $self
 * @return a parsed token object extending Operand class or -1, if such token has not been found.
 * @see Parser_parse()
 * @see Parser_new()
 */
fn Parser_parse_operand($self)
{
	$operand=Parser_parse_multiple($self, SIMPLE_OPERANDS)
	if $operand<0
	{
		ret(-1)
	}
	while 1
	{
		Parser_promise_position($self)
		if Parser_skip_spaces($self)
		{
			Parser_reject_position($self)
			ret($operand)
		}
		$next_operand=Parser_parse_multiple($self, OPERANDS_POSTFIXES)
		if $next_operand<0
		{
			Parser_reject_position($self)
			ret($operand)
		}
		Parser_resolve_position($self)
		$next_operand.ID=$operand
		$operand=$next_operand
	}
}
/**
 * Parse an expression in parenthesis.
 * @param $self
 * @return a parsed token object extending Operand class or -1, if parenthesis have not been found.
 * @see Parser_parse()
 * @see Parser_new()
 */
fn Parser_parse_parenthesis($self)
{
	Parser_promise_position($self)
	if Parser_get($self)!='('
	{
		Parser_reject_position($self)
		ret(-1)
	}
	Parser_resolve_position($self)
	if Parser_skip_spaces($self)
	{
		$self[1, $self.top]-1
		syntax_error_expected_expression($self)
	}
	$expression=Parser_parse_expression($self)
	if $expression<0
	{
		syntax_error_expected_expression($self)
	}
	if Parser_skip_spaces($self)
	{
		$self[1, $self.top]-1
		syntax_error_expected($self, ')')
	}
	Parser_promise_position($self)
	if Parser_get($self)!=')'
	{
		Parser_reject_position($self)
		syntax_error_expected($self, ')')
	}
	Parser_resolve_position($self)
	ret($expression)
}
/**
 * Parse an expression - a thing consisting of operators and operands.
 * @param @self
 * @return a parsed token object extending Operand class or -1, if such token has not been found.
 * @see Parser_parse()
 * @see Parser_new()
 */
fn Parser_parse_expression($self)
{
	$space=0
	while 1
	{
		if $space
		{
			if Parser_skip_spaces($self)
			{
				$self[1, $self.top]-1
				syntax_error_expected_operand($self)
			}
			$token=Parser_parse_multiple($self, OPERANDS)
			if $token<0
			{
				syntax_error_expected_operand($self)
			}
		}
		else
		{
			$token=Parser_parse_multiple($self, OPERANDS)
			if $token<0
			{
				ret(-1)
			}
			$operands=Stack_new(INT)
			$operators=Stack_new(INT)
			$space=1
		}
		Stack_push($operands, $token)
		Parser_promise_position($self)
		if Parser_skip_spaces($self)
		{
			Parser_reject_position($self)
			break
		}
		$token=0
		while 1
		{
			$token=Parser_parse_expression_jump0[-$token](Parser_get($self), $self)
			if $token>=0
			{
				break
			}
		}
		if $token!=INT_MAX
		{
			Parser_resolve_position($self)
			Stack_push($operators, $token)
		}
		else
		{
			Parser_reject_position($self)
			break
		}
	}
	$token=parse_expression_part($operands, $operators, 0, $operands.top)
	remove($operands)
	remove($operators)
	ret($token)
}
Parser_parse_expression_jump0=new(10, 1, INT)
Parser_parse_expression_jump0[0]=
{
	if operators_table[$1]
	{
		if operators_table[$1]<0
		{
			Parser_promise_position($2)
		}
		ret(operators_table[$1])
	}
	if $1!='%'
	{
		ret(INT_MAX)
	}
	ret(OPERATOR_MOD)
}
operators_table=new(128, 1, INT8)
clean(operators_table)
operators_table['%']=OPERATOR_MOD
operators_table['/']=OPERATOR_DIV
operators_table['d']=-1
operators_table['*']=OPERATOR_MUL
operators_table['!']=-2
operators_table['+']=OPERATOR_ADD
operators_table['-']=OPERATOR_SUB
operators_table['>']=-3
operators_table['<']=-4
operators_table['=']=-5
operators_table['|']=-6
operators_table['^']=OPERATOR_XOR
operators_table['&']=-7
Parser_parse_expression_jump0[1]=
{
	if $1!='i'
	{
		Parser_reject_position($2)
		ret(INT_MAX)
	}
	ret(-8)
}
Parser_parse_expression_jump0[2]=
{
	if $1!='='
	{
		Parser_reject_position($2)
		ret(INT_MAX)
	}
	Parser_resolve_position($2)
	ret(OPERATOR_NEQ)
}
Parser_parse_expression_jump0[3]=
{
	if $1=='>'
	{
		Parser_resolve_position($2)
		ret(OPERATOR_RSH)
	}
	if $1=='='
	{
		Parser_resolve_position($2)
		ret(OPERATOR_GEQ)
	}
	Parser_reject_position($2)
	ret(OPERATOR_G)
}
Parser_parse_expression_jump0[4]=
{
	if $1=='<'
	{
		Parser_resolve_position($2)
		ret(OPERATOR_LSH)
	}
	if $1=='='
	{
		Parser_resolve_position($2)
		ret(OPERATOR_LEQ)
	}
	Parser_reject_position($2)
	ret(OPERATOR_L)
}
Parser_parse_expression_jump0[5]=
{
	if $1!='='
	{
		Parser_reject_position($2)
		ret(INT_MAX)
	}
	Parser_resolve_position($2)
	ret(OPERATOR_EQ)
}
Parser_parse_expression_jump0[6]=
{
	if $1!='|'
	{
		Parser_reject_position($2)
		ret(OPERATOR_BOR)
	}
	Parser_resolve_position($2)
	ret(OPERATOR_OR)
}
Parser_parse_expression_jump0[7]=
{
	if $1!='&'
	{
		Parser_reject_position($2)
		ret(OPERATOR_BAND)
	}
	Parser_resolve_position($2)
	ret(OPERATOR_AND)
}
Parser_parse_expression_jump0[8]=
{
	if $1!='v'
	{
		Parser_reject_position($2)
		ret(INT_MAX)
	}
	Parser_promise_position($2)
	ret(-9)
}
Parser_parse_expression_jump0[9]=
{
	Parser_reject_position($2)
	if is_symbolic($1)
	{
		Parser_reject_position($2)
		ret(INT_MAX)
	}
	Parser_resolve_position($2)
	ret(OPERATOR_IDIV)
}
fn parse_expression_part($operands, $operators, $start_operator, $end_operator)
{
	if $end_operator-$start_operator
	{
		$priority_record=0
		$position_record=0
		for ($a=$start_operator; $a!=$end_operator; $a+1)
		{
			$priority=PRIORITY[$operators[$a]]
			if $priority>=$priority_record
			{
				$priority_record=$priority
				$position_record=$a
			}
		}
		ret(
			Binary_operator_new(
				$operators[$position_record],
				parse_expression_part(
					$operands,
					$operators,
					$start_operator,
					$position_record
				),
				parse_expression_part(
					$operands,
					$operators,
					$position_record+1,
					$end_operator
				)
			)
		)
	}
	else
	{
		ret($operands[$start_operator])
	}
}
/**
 * Move the character reader through space characters and comments to a first non-space character or to the end of text.
 * @param $self
 * @return 0 on a non-space character or 1 on the end of text.
 * @see Parser_parse()
 * @see Parser_skip_spaces_for()
 * @see Parser_new()
 */
fn Parser_skip_spaces($self)
{
	$lines_count=get_ysize($self.lines)
	$state=0
	while 1
	{
		if $self[1, $self.top]==$lines_count
		{
			ret(1)
		}
		Parser_promise_position($self)
		$state=Parser_skip_spaces_jump0[$state](Parser_get($self), $self)
		if $state<0
		{
			ret(0)
		}
	}
}
Parser_skip_spaces_jump0=new(5, 1, INT)
Parser_skip_spaces_jump0[0]=
{
	if $1=='/'
	{
		ret(1)
	}
	if is_spatial($1)
	{
		Parser_resolve_position($2)
		ret(0)
	}
	Parser_reject_position($2)
	ret(-1)
}
Parser_skip_spaces_jump0[1]=
{
	if $1=='/'
	{
		Parser_resolve_position($2)
		Parser_resolve_position($2)
		ret(2)
	}
	if $1=='*'
	{
		Parser_resolve_position($2)
		Parser_resolve_position($2)
		ret(3)
	}
	Parser_reject_position($2)
	Parser_reject_position($2)
	ret(-1)
}
Parser_skip_spaces_jump0[2]=
{
	Parser_resolve_position($2)
	if $1!=EOF
	{
		ret(2)
	}
	ret(0)
}
Parser_skip_spaces_jump0[3]=
{
	Parser_resolve_position($2)
	if $1!='*'
	{
		ret(3)
	}
	ret(4)
}
Parser_skip_spaces_jump0[4]=
{
	Parser_resolve_position($2)
	if $1=='/'
	{
		ret(0)
	}
	if $1!='*'
	{
		ret(3)
	}
	ret(4)
}
/**
 * Acts like Parser_skip_spaces(), but preferred for "for" statement parsing.
 * @param $self
 * @return 0 on a non-space character or 1 on the end of text.
 * @see Parser_parse()
 * @see For_new()
 * @see Parser_skip_spaces()
 * @see Parser_new()
 */
fn Parser_skip_spaces_for($self)
{
	$lines_count=get_ysize($self.lines)
	$state=0
	while 1
	{
		if $self[1, $self.top]==$lines_count
		{
			ret(1)
		}
		Parser_promise_position($self)
		$state=Parser_skip_spaces_for_jump0[$state](Parser_get($self), $self)
		if $state<0
		{
			ret(0)
		}
	}
}
Parser_skip_spaces_for_jump0=clone(Parser_skip_spaces_jump0)
Parser_skip_spaces_for_jump0[0]=
{
	if $1=='/'
	{
		ret(1)
	}
	if is_spatial($1)&&$1!=';'
	{
		Parser_resolve_position($2)
		ret(0)
	}
	Parser_reject_position($2)
	ret(-1)
}
/**
 * Get a character from the text at the character reader position.
 * @param $self
 * @return a character or EOF on the end of text.
 * @see Parser_parse()
 * @see Parser_promise_position()
 * @see Parser_new()
 */
fn Parser_get($self)
{
	$lines=$self.lines
	$top=$self.top
	$line=$self[1, $top]
	if $line!=get_ysize($lines)
	{
		$index=$self[0, $top]
		if $index!=$lines[1, $line]
		{
			$self[0, $top]+1
			ret($self.text[$index]&0xFF)
		}
		$self[0, $top]=$lines[0, $line+1]
		$self[1, $top]+1
	}
	ret(EOF)
}
fn Parser_get_line($self, $dest, $line)
{
	$lines=$self.lines
	if $line>=0&&$line<get_ysize($lines)
	{
		$size=$lines[1, $line]-$lines[0, $line]
		if get_size($dest)<$size
		{
			resize($dest, $size)
		}
		copy($dest, $self.text, 0, $lines[0, $line], $size)
		$dest[$size]=0
		ret(0)
	}
	ret(1)
}
/**
 * Promise a position of the character reader when parsing a token. If token has been parsed successfully, call Parser_resolve_position(), otherwise Parser_reject_position().
 * @param $self
 * @see Parser_resolve_position()
 * @see Parser_reject_position()
 * @see Parser_new()
 */
fn Parser_promise_position($self)
{
	$self.top+1
	$top=$self.top
	if $top==get_ysize($self)
	{
		resize($self, 2, $top+1)
	}
	copy($self, $self, 2*$top, 2*($top-1), 2)
}
/**
 * If token has been parsed successfully, call this method. The new position of the character reader will be applied.
 * @param $self
 * @see Parser_promise_position()
 * @see Parser_reject_position()
 * @see Parser_new()
 */
fn Parser_resolve_position($self)
{
	$top=$self.top
	copy($self, $self, 2*($top-1), 2*$top, 2)
	$self.top-1
}
/**
 * If token has not been parsed successfully, call this method. The position of the character reader will be reverted to the position before promising.
 * @param $self
 * @see Parser_promise_position()
 * @see Parser_resolve_position()
 * @see Parser_new()
 */
fn Parser_reject_position($self)
{
	$self.top-1
}
/**
 * Remove the Parser object.
 * @param $self
 * @see Parser_new()
 */
fn Parser_remove($self)
{
	remove($self.text)
	remove($self.lines)

	remove($self)
}