/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/operands/Unary_operator.pixi
 * class Unary_operator;
 *
 * Include before.
 * program/translator/tokens/operands/system/Operand.pixi
 * Dependencies.
 * program/translator/Parser.pixi
 * program/translator/tokens/operators.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens groups.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/generator.pixi
 * program/translator/tokens/show.pixi
 */

fn Unary_operator_new($parser)
{
	$self=new(1, 1, INT8)
	$self.f=Unary_operator

	Parser_promise_position($parser)
	$token=Parser_get($parser)
	if $token=='!'
	{
		$self.operator=OPERATOR_NOT
	}
	else{if $token=='~'
	{
		$self.operator=OPERATOR_BNOT
	}
	else{if $token=='-'
	{
		$self.operator=OPERATOR_NEG
	}
	else
	{
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}}}
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_operand($parser)
	}
	$token=Parser_parse_multiple($parser, OPERANDS)
	if $token<0
	{
		syntax_error_expected_operand($parser)
	}
	$self.operand=$token

	ret($self)
}
Unary_operator=clone(Operand)
Unary_operator.generate=Unary_operator_generate
Unary_operator.show=Unary_operator_show
Unary_operator.remove=Unary_operator_remove
fn Unary_operator_generate($self)
{
	$statements_record=Stack_get(functions_texts).statements_record
	fputs(OPERATOR_FUNCTION[$self.operator], $statements_record) $self.operand.f.generate($self.operand) fputc(')', $statements_record)
}
fn Unary_operator_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Unary_operator\"") next_property()
		indent() logf("\"operator\": \"%s\"", OPERATOR_STRING[$self.operator]) next_property()
		indent() logf("\"operand\": ") $self.operand.f.show($self.operand)
	end_object()
}
fn Unary_operator_remove($self)
{
	$self.operand.f.remove($self.operand)

	remove($self)
}