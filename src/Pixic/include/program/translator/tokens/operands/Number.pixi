/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/operands/Number.pixi
 * class Number extends Operand;
 *
 * Include before.
 * program/translator/tokens/operands/system/Operand.pixi
 * Dependencies.
 * program/translator/Parser.pixi
 * program/info/syntax errors.pixi
 * program/translator/character filters.pixi
 * program/translator/generator.pixi
 * program/info/developer errors.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/tokens/show.pixi
 */

NUMBER_INTEGER=    0
NUMBER_BINARY=     1
NUMBER_HEXADECIMAL=2
NUMBER_COLOR=      3
NUMBER_FLOAT=      4

fn Number_new($parser)
{
	$self=Operand_new(0, 0)
	$self.f=Number

	Parser_promise_position($parser)
	$self.text=$parser.text
	if Parser_get($parser)!='-'
	{
		Parser_reject_position($parser)
		$self.minus=0
		Parser_promise_position($parser)
	}
	else
	{
		if Parser_skip_spaces($parser)
		{
			Parser_reject_position($parser)

			remove($self)
			ret(-1)
		}
		$self.minus=1
	}
	$self.value_start=$parser[0, $parser.top]
	Parser_promise_position($parser)
	$state=0
	while 1
	{
		$state=Number_new_jump0[$state](Parser_get($parser), $self, $parser)
		if $state<0
		{
			break
		}
		Parser_resolve_position($parser)
		Parser_promise_position($parser)
	}
	Parser_reject_position($parser)
	if $state==-1
	{
		$self.value_length=$parser[0, $parser.top]-$self.value_start
		Parser_resolve_position($parser)

		ret($self)
	}
	if $state==-2
	{
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	if $state==-3
	{
		syntax_error_invalid_number($parser)
	}
}
Number_new_jump0=new(13, 1, INT)
Number_new_jump0[0]=
{
	if $1=='#'
	{
		$2.type=NUMBER_COLOR
		$2.value_start=$3[0, $3.top]
		ret(1)
	}
	if $1=='.'
	{
		$2.type=NUMBER_FLOAT
		ret(2)
	}
	if $1=='0'
	{
		ret(3)
	}
	if $1>='1'&&$1<='9'
	{
		$2.type=NUMBER_INTEGER
		ret(4)
	}
	ret(-2)
}
Number_new_jump0[1]=
{
	if $1>='0'&&$1<='9'||($1>='A'&&$1<='F')||($1>='a'&&$1<='f')
	{
		ret(5)
	}
	ret(-3)
}
Number_new_jump0[2]=
{
	if $1>='0'&&$1<='9'
	{
		ret(6)
	}
	if $2.minus
	{
		ret(-3)
	}
	ret(-2)
}
Number_new_jump0[3]=
{
	if $1=='.'
	{
		$2.type=NUMBER_FLOAT
		ret(6)
	}
	if $1=='B'||$1=='b'
	{
		$2.type=NUMBER_BINARY
		$2.value_start=$3[0, $3.top]
		ret(7)
	}
	if $1=='X'||$1=='x'
	{
		$2.type=NUMBER_HEXADECIMAL
		$2.value_start=$3[0, $3.top]
		ret(1)
	}
	if $1>='0'&&$1<='9'
	{
		$2.type=NUMBER_INTEGER
		ret(4)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	$2.type=NUMBER_INTEGER
	ret(-1)
}
Number_new_jump0[4]=
{
	if $1=='.'
	{
		$2.type=NUMBER_FLOAT
		ret(6)
	}
	if $1>='0'&&$1<='9'
	{
		ret(4)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[5]=
{
	if $1>='0'&&$1<='9'||($1>='A'&&$1<='F')||($1>='a'&&$1<='f')
	{
		ret(5)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[6]=
{
	if $1>='0'&&$1<='9'
	{
		ret(6)
	}
	if $1=='E'||$1=='e'
	{
		ret(8)
	}
	if $1=='F'||$1=='f'
	{
		ret(9)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[7]=
{
	if $1=='0'||$1=='1'
	{
		ret(10)
	}
	ret(-3)
}
Number_new_jump0[8]=
{
	if $1=='+'||$1=='-'
	{
		ret(11)
	}
	if $1>='0'&&$1<='9'
	{
		ret(12)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[9]=
{
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[10]=
{
	if $1=='0'||$1=='1'
	{
		ret(10)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[11]=
{
	if $1>='0'&&$1<='9'
	{
		ret(12)
	}
	ret(-3)
}
Number_new_jump0[12]=
{
	if $1>='0'&&$1<='9'
	{
		ret(12)
	}
	if $1=='F'||$1=='f'
	{
		ret(9)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number=clone(Operand)
Number.generate=Number_generate
Number.show=Number_show
Number.remove=Number_remove
fn Number_generate($self)
{
	$index=constants.count
	constants.count+1
	fprintf(constants_record, "pc[%u]=Var_new", $index)
	$type=$self.type
	if $type==NUMBER_INTEGER
	{
		fputc('(', constants_record)
		if $self.minus
		{
			fputc('-', constants_record)
		}
		fwrite($self.text, $self.value_length, constants_record, $self.value_start)
	}
	else{if $type==NUMBER_FLOAT
	{
		fputs("2(", constants_record)
		if $self.minus
		{
			fputc('-', constants_record)
		}
		fwrite($self.text, $self.value_length, constants_record, $self.value_start)
	}
	else{if $type==NUMBER_BINARY
	{
		if $self.minus
		{
			fputs("(-0x", constants_record)
		}
		else
		{
			fputs("(0x", constants_record)
		}
		$value=0
		$text=$self.text
		$value_length=$self.value_length
		$value_end=$self.value_start+$value_length
		$a=$value_length while $a!=0
		{
			$a-1
			$value|($text[$value_end-$a-1]=='1')<<($a&0b11)
			if !($a&0b11)
			{
				fprintf(constants_record, "%X", $value)
				$value=0
			}
		}
	}
	else{if $type==NUMBER_HEXADECIMAL
	{
		if $self.minus
		{
			fputs("(-0x", constants_record)
		}
		else
		{
			fputs("(0x", constants_record)
		}
		fwrite($self.text, $self.value_length, constants_record, $self.value_start)
	}
	else{if $type==NUMBER_COLOR
	{
		generator_deinit()
		developer_error_not_implemented("color type number generation")
	}}}}}
	fputs("); ", constants_record)
	fprintf(Stack_get(functions_texts).statements_record, "pc[%u]", $index)
}
fn Number_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Number\"") next_property()
		$type=$self.type
		indent() logf("\"number type\": \"%s\"", Number_show_table[$type]) next_property()
		indent()
			if $type==NUMBER_INTEGER||$type==NUMBER_FLOAT
			{
				$value=new($self.value_length, 1, INT8)
				copy($value, $self.text, 0, $self.value_start)
			}
			else{if $type==NUMBER_BINARY
			{
				$value=new($self.value_length+2, 1, INT8)
				$value[0]='0'
				$value[1]='b'
				copy($value, $self.text, 2, $self.value_start)
			}
			else{if $type==NUMBER_HEXADECIMAL
			{
				$value=new($self.value_length+2, 1, INT8)
				$value[0]='0'
				$value[1]='x'
				copy($value, $self.text, 2, $self.value_start)
			}
			else{if $type==NUMBER_COLOR
			{
				$value=new($self.value_length+1, 1, INT8)
				$value[0]='#'
				copy($value, $self.text, 1, $self.value_start)
			}}}}
			if $self.minus
			{
				logf("\"value\": \"-%s\"", $value)
			}
			else
			{
				logf("\"value\": \"%s\"", $value)
			}
			remove($value)
	end_object()
}
Number_show_table=new(5, 1, INT)
Number_show_table[NUMBER_INTEGER]=    "decimal integer"
Number_show_table[NUMBER_BINARY]=     "binary integer"
Number_show_table[NUMBER_HEXADECIMAL]="hexadecimal integer"
Number_show_table[NUMBER_COLOR]=      "color integer"
Number_show_table[NUMBER_FLOAT]=      "floating point number"
fn Number_remove($self)
{
	remove($self)
}