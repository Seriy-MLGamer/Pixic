/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/operands/Property.pixi
 * class Property extends Postfix;
 *
 * Include before.
 * program/translator/tokens/operands/system/Operand.pixi
 * Dependencies.
 * program/translator/tokens/operands/system/Postfix.pixi
 * program/translator/Parser.pixi
 * program/info/syntax errors.pixi
 * program/translator/character filters.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/generator.pixi
 * program/translator/Function_text.pixi
 * core/crypto/hash.pixi
 * program/translator/tokens/operators.pixi
 * program/translator/tokens/show.pixi
 */

fn Property_new($parser)
{
	$self=Postfix_new(1, 0)
	$self.f=Property

	$self.text=$parser.text
	Parser_promise_position($parser)
	if Parser_get($parser)!='.'
	{
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_property($parser)
	}
	$self.name_start=$parser[0, $parser.top]
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		Parser_resolve_position($parser)
		Parser_promise_position($parser)
		while 1
		{
			if is_symbolic(Parser_get($parser))
			{
				Parser_resolve_position($parser)
				Parser_promise_position($parser)
			}
			else
			{
				Parser_reject_position($parser)
				$self.name_length=$parser[0, $parser.top]-$self.name_start

				ret($self)
			}
		}
	}
	Parser_reject_position($parser)
	syntax_error_expected_property($parser)
}
Property=clone(Operand)
Property.generate=Property_generate
Property.generate_assign=Property_generate_assign
Property.show=Property_show
Property.remove=Postfix_remove
fn Property_generate($self)
{
	$statements_record=Stack_get(functions_texts).statements_record
	fputs("get_property(", $statements_record) $self.ID.f.generate($self.ID) fprintf($statements_record, ", 0x%X, \"", CRC32($self.text, $self.name_start, $self.name_length)) fwrite($self.text, $self.name_length, $statements_record, $self.name_start) fputs("\")", $statements_record)
}
fn Property_generate_assign($self, $assign)
{
	$function_text=Stack_get(functions_texts)
	$statements_record=$function_text.statements_record
	Function_text_indent($function_text)
	if $assign.operator!=OPERATOR_ASSIGN
	{
			fputs("{\n", $statements_record)
		$function_text.indents+1
			Function_text_indent($function_text) fputs("Var temp=", $statements_record) $self.ID.f.generate($self.ID) fputs(";\n", $statements_record)
			$hash=CRC32($self.text, $self.name_start, $self.name_length)
			Function_text_indent($function_text) fprintf($statements_record, "set_property(temp, 0x%X, \"", $hash) fwrite($self.text, $self.name_length, $statements_record, $self.name_start) fputs("\", ", $statements_record) fputs(OPERATOR_FUNCTION[$assign.operator], $statements_record) fprintf($statements_record, "get_property(temp, 0x%X, \"", $hash) fwrite($self.text, $self.name_length, $statements_record, $self.name_start) fputs("\"), ", $statements_record) $assign.value.f.generate($assign.value) fputs("));\n", $statements_record)
			$function_text.indents-1
		Function_text_indent($function_text) fputs("}\n", $statements_record)
	}
	else
	{
			fputs("set_property(", $statements_record) $self.ID.f.generate($self.ID) fprintf($statements_record, ", 0x%X, \"", CRC32($self.text, $self.name_start, $self.name_length)) fwrite($self.text, $self.name_length, $statements_record, $self.name_start) fputs("\", ", $statements_record) $assign.value.f.generate($assign.value) fputs(");\n", $statements_record)
	}
}
fn Property_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Property\"") next_property()
		indent() logf("\"ID\": ") $self.ID.f.show($self.ID) next_property()
		indent()
			$name=new($self.name_length, 1, INT8)
			copy($name, $self.text, 0, $self.name_start)
			logf("\"name\": \"%s\"", $name)
			remove($name)
	end_object()
}