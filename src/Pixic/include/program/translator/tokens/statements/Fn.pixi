/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/Fn.pixi
 * class Fn extends Statement;
 *
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/translator/Parser.pixi
 * program/translator/tokens/keywords.pixi
 * program/translator/character filters.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens/operands/Variable.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/tokens/statements/system/Block.pixi
 * program/translator/Function_text.pixi
 * program/translator/generator.pixi
 * program/translator/tokens/show.pixi
 */

fn Fn_new($parser)
{
	$self=Statement_new($parser)
	$self.f=Fn

	Parser_promise_position($parser)
	$test=new(2, 1, INT8)
	clean($test)
	copy($test, $parser.text, 0, $parser[0, $parser.top])
	if strstr($test, KEYWORD_FN)
	{
		remove($test)
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	remove($test)
	$parser[0, $parser.top]+2
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		Parser_reject_position($parser)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_reject_position($parser)
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_function_name($parser)
	}
	Parser_promise_position($parser)
	$token=Variable_new($parser)
	if $token<0
	{
		syntax_error_expected_function_name($parser)
	}
	if $parser.text[$token.name_start]=='$'
	{
		Parser_reject_position($parser)
		syntax_error_expected_function_name($parser)
	}
	Parser_resolve_position($parser)
	$self.name=$token
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, '(')
	}
	Parser_promise_position($parser)
	if Parser_get($parser)!='('
	{
		Parser_reject_position($parser)
		syntax_error_expected($parser, '(')
	}
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, ')')
	}
	$arguments=Stack_new(INT)
	$token=Variable_new($parser)
	if $token<0
	{
		Parser_promise_position($parser)
		if Parser_get($parser)!=')'
		{
			Parser_reject_position($parser)
			syntax_error_expected($parser, ')')
		}
	}
	else
	{
		while 1
		{
			if Parser_skip_spaces($parser)
			{
				$parser[1, $parser.top]-1
				syntax_error_expected($parser, ')')
			}
			Stack_push($arguments, $token)
			Parser_promise_position($parser)
			$token=Parser_get($parser)
			if $token==')'
			{
				break
			}
			if $token==','
			{
				Parser_resolve_position($parser)
				if Parser_skip_spaces($parser)
				{
					$parser[1, $parser.top]-1
					syntax_error_expected_argument($parser)
				}
				$token=Variable_new($parser)
				if $token<0
				{
					syntax_error_expected_argument($parser)
				}
			}
			else
			{
				Parser_reject_position($parser)
				syntax_error_expected($parser, ')')
			}
		}
	}
	Parser_resolve_position($parser)
	$self.arguments=$arguments
	$self.last_line=$parser[1, $parser.top]+1
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, '{')
	}
	$token=Block_new($parser)
	if $token<0
	{
		syntax_error_expected($parser, '{')
	}
	$self.body=$token

	ret($self)
}
Fn=new(1, 1, INT8)
Fn.generate=Fn_generate
Fn.show=Fn_show
Fn.remove=Fn_remove
fn Fn_generate($self)
{
	$function_text=Function_text_new()
	Stack_push(functions_texts, $function_text)
	for ($a=$self.body.first; $a>=0; $a=$a.next)
	{
		$a.f.generate($a)
	}
	Function_text_close($function_text)
	$parser=$self.parser
	$lines=$parser.lines
	$text=$parser.text
	$name=new($self.name.name_length, 1, INT8)
	copy($name, $text, 0, $self.name.name_start)
	set_prop(functions, $name, 1)
	$last_line=$self.last_line
	for ($a=$self.first_line; $a!=$last_line; $a+1)
	{
		fputs("//", functions_record)
		fwrite($text, $lines[1, $a]-$lines[0, $a], functions_record, $lines[0, $a])
		fputc('\n', functions_record)
	}
	fprintf(functions_record, "Var pf%s(uint32_t arguments_count, ...)
{
	va_list arguments;
	va_start(arguments, arguments_count);
", $name)
		remove($name)
		$locals=$function_text.locals
		$arguments=$self.arguments
		$arguments_count=$arguments.top+1
		for ($a=0; $a!=$arguments_count; $a+1)
		{
			$name_start=$arguments[$a].name_start
			if $text[$name_start]!='$'
			{
				$name=new($arguments[$a].name_length, 1, INT8)
				copy($name, $text, 0, $name_start)
				set_prop(variables, $name, 1)
			}
			else
			{
				$name=new($arguments[$a].name_length-1, 1, INT8)
				copy($name, $text, 0, $name_start+1)
				set_prop($locals, $name, 1)
			}
			remove($name)
		}
		$tokens=get_proplist($locals)
		if $tokens>=0
		{
			fputs("\tVar ", functions_record)
				$tokens_count=get_size($tokens)-1
				$a=0 while 1
				{
					fputs("pl", functions_record) fputs($tokens[$a], functions_record)
					if $a==$tokens_count
					{
						break
					}
					fputs(", ", functions_record)
					$a+1
				}
				fputs(";\n", functions_record)
			remove_proplist($tokens)
		}
		for ($a=0; $a!=$arguments_count; $a+1)
		{
			fprintf(functions_record, "\tif (arguments_count>=%u) ", $a+1)
				$argument=$arguments[$a]
				$name_start=$argument.name_start
				if $text[$name_start]!='$'
				{
					fputs("pv", functions_record) fwrite($text, $argument.name_length, functions_record, $name_start)
				}
				else
				{
					fputs("pl", functions_record) fwrite($text, $argument.name_length-1, functions_record, $name_start+1)
				}
				fputs("=va_arg(arguments, Var);\n", functions_record)
		}
		fputs($function_text.statements, functions_record)
	fputs("}\n", functions_record)
	Function_text_remove(Stack_pop(functions_texts))
}
fn Fn_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Fn\"") next_property()
		indent() Statement_show($self) next_property()
		indent()
			$token=$self.name
			$text=$token.text
			$name=new($token.name_length, 1, INT8)
			copy($name, $text, 0, $token.name_start)
			logf("\"name\": \"%s\"", $name) next_property()
		indent() logf("\"arguments\": ")
			$arguments=$self.arguments
			$arguments_count=$arguments.top
			if $arguments_count+1
			{
				begin_array()
					$a=0 while 1
					{
						$token=$arguments[$a]
						indent()
							resize($name, $token.name_length)
							copy($name, $text, 0, $token.name_start)
							logf("\"%s\"", $name)
						if $a==$arguments_count
						{
							break
						}
							next_property()
						$a+1
					}
				end_array()
			}
			else
			{
				logf("null")
			}
			remove($name)
			next_property()
		indent() logf("\"body\": ") Block_show($self.body)
	end_object()
}
fn Fn_remove($self)
{
	Variable_remove($self.name)
	$arguments=$self.arguments
	$size=$arguments.top+1
	for ($a=0; $a!=$size; $a+1)
	{
		Variable_remove($arguments[$a])
	}
	remove($arguments)
	Block_remove($self.body)

	remove($self)
}