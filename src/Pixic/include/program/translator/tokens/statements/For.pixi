/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/For.pixi
 * class For extends Statement;
 *
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/translator/Parser.pixi
 * program/translator/tokens/keywords.pixi
 * program/translator/character filters.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens groups.pixi
 * program/translator/tokens/statements/system/Block.pixi
 * program/translator/generator.pixi
 * program/info/developer errors.pixi
 * program/translator/tokens/show.pixi
 */

fn For_new($parser)
{
	$self=Statement_new($parser)
	$self.f=For

	Parser_promise_position($parser)
	$test=new(3, 1, INT8)
	clean($test)
	copy($test, $parser.text, 0, $parser[0, $parser.top])
	if strstr($test, KEYWORD_FOR)
	{
		remove($test)
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	remove($test)
	$parser[0, $parser.top]+3
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		Parser_reject_position($parser)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_reject_position($parser)
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, '(')
	}
	Parser_promise_position($parser)
	if Parser_get($parser)!='('
	{
		Parser_reject_position($parser)
		syntax_error_expected($parser, '(')
	}
	Parser_resolve_position($parser)
	if Parser_skip_spaces_for($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_statement($parser)
	}
	$token=Parser_parse_multiple($parser, STATEMENTS)
	if $token<0
	{
		Parser_promise_position($parser)
		if Parser_get($parser)!=';'
		{
			Parser_reject_position($parser)
			syntax_error_expected_statement($parser)
		}
		Parser_resolve_position($parser)
		$self.initialization=-1
	}
	else
	{
		$self.initialization=$token
		if Parser_skip_spaces_for($parser)
		{
			$parser[1, $parser.top]-1
			syntax_error_expected($parser, ';')
		}
		Parser_promise_position($parser)
		if Parser_get($parser)!=';'
		{
			Parser_reject_position($parser)
			syntax_error_expected($parser, ';')
		}
		Parser_resolve_position($parser)
	}
	if Parser_skip_spaces_for($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_expression($parser)
	}
	$token=Parser_parse_expression($parser)
	if $token<0
	{
		syntax_error_expected_expression($parser)
	}
	else
	{
		$self.condition=$token
		if Parser_skip_spaces_for($parser)
		{
			$parser[1, $parser.top]-1
			syntax_error_expected($parser, ';')
		}
		Parser_promise_position($parser)
		if Parser_get($parser)!=';'
		{
			Parser_reject_position($parser)
			syntax_error_expected($parser, ';')
		}
		Parser_resolve_position($parser)
	}
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_statement($parser)
	}
	$token=Parser_parse_multiple($parser, STATEMENTS)
	if $token<0
	{
		Parser_promise_position($parser)
		if Parser_get($parser)!=')'
		{
			Parser_reject_position($parser)
			syntax_error_expected_statement($parser)
		}
		Parser_resolve_position($parser)
		$self.post_statement=-1
	}
	else
	{
		$self.post_statement=$token
		if Parser_skip_spaces($parser)
		{
			$parser[1, $parser.top]-1
			syntax_error_expected($parser, ')')
		}
		Parser_promise_position($parser)
		if Parser_get($parser)!=')'
		{
			Parser_reject_position($parser)
			syntax_error_expected($parser, ')')
		}
		Parser_resolve_position($parser)
	}
	$self.last_line=$parser[1, $parser.top]+1
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, '{')
	}
	$token=Block_new($parser)
	if $token<0
	{
		syntax_error_expected($parser, '{')
	}
	$self.body=$token

	ret($self)
}
For=new(1, 1, INT8)
For.generate=For_generate
For.show=For_show
For.remove=For_remove
fn For_generate($self)
{
	generator_deinit()
	developer_error_not_implemented("\"for\" loop generation")
}
fn For_show($self)
{
	begin_object()
		indent() logf("\"type\": \"For\"") next_property()
		indent() Statement_show($self) next_property()
		indent() logf("\"initialization\": ")
			$token=$self.initialization
			if $token<0
			{
				logf("null")
			}
			else
			{
				$token.f.show($token)
			}
			next_property()
		indent() logf("\"condition\": ") $self.condition.f.show($self.condition) next_property()
		indent() logf("\"post-statement\": ")
			$token=$self.post_statement
			if $token<0
			{
				logf("null")
			}
			else
			{
				$token.f.show($token)
			}
			next_property()
		indent() logf("\"body\": ") Block_show($self.body)
	end_object()
}
fn For_remove($self)
{
	$token=$self.initialization
	if $token>=0
	{
		$token.f.remove($token)
	}
	$self.condition.f.remove($self.condition)
	$token=$self.post_statement
	if $token>=0
	{
		$token.f.remove($token)
	}
	Block_remove($self.body)

	remove($self)
}