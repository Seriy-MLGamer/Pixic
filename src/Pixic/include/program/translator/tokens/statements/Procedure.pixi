/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/Procedure.pixi
 * class Procedure extends Statement;
 *
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/translator/Parser.pixi
 * core/structures/stack/Stack.pixi
 * program/translator/generator.pixi
 * program/translator/Function_text.pixi
 * program/translator/tokens/operands/Function.pixi
 * program/translator/tokens/show.pixi
 */

fn Procedure_new($parser)
{
	$self=Statement_new($parser)
	$self.f=Procedure

	Parser_promise_position($parser)
	$token=Parser_parse_operand($parser)
	if $token<0
	{
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	if !$token.is_function
	{
		$token.f.remove($token)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_resolve_position($parser)
	$self.function=$token
	$self.last_line=$parser[1, $parser.top]+1

	ret($self)
}
Procedure=new(1, 1, INT8)
Procedure.generate=Procedure_generate
Procedure.show=Procedure_show
Procedure.remove=Procedure_remove
fn Procedure_generate($self)
{
	Statement_generate($self)
	$function_text=Stack_get(functions_texts)
	$statements_record=$function_text.statements_record
	Function_text_indent($function_text) Function_generate($self.function) fputs(";\n", $statements_record)
}
fn Procedure_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Procedure\"") next_property()
		indent() Statement_show($self) next_property()
		$function=$self.function
		indent() logf("\"ID\": ") $function.ID.f.show($function.ID) next_property()
		indent() logf("\"arguments\": ")
			$arguments=$function.arguments
			$arguments_count=$arguments.top
			if $arguments_count+1
			{
				begin_array()
					$a=0 while 1
					{
						$argument=$arguments[$a]
						indent() $argument.f.show($argument)
						if $a==$arguments_count
						{
							break
						}
							next_property()
						$a+1
					}
				end_array()
			}
			else
			{
				logf("null")
			}
	end_object()
}
fn Procedure_remove($self)
{
	$self.function.f.remove($self.function)

	remove($self)
}