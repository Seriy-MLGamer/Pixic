/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/system/Block.pixi
 * class Block extends Twoended_list;
 *
 * Dependencies.
 * core/structures/linked list/Twoended_list.pixi
 * program/translator/Parser.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens groups.pixi
 * core/structures/linked list/List_node.pixi
 * program/translator/tokens/show.pixi
 */

fn Block_new($parser)
{
	$self=Twoended_list_new()

	Parser_promise_position($parser)
	if Parser_get($parser)!='{'
	{
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	while 1
	{
		if Parser_skip_spaces($parser)
		{
			$parser[1, $parser.top]-1
			syntax_error_expected($parser, '}')
		}
		$statement=Parser_parse_multiple($parser, STATEMENTS)
		if $statement<0
		{
			Parser_promise_position($parser)
			if Parser_get($parser)!='}'
			{
				Parser_reject_position($parser)
				syntax_error_invalid_statement($parser)
			}
			Parser_resolve_position($parser)
			Parser_resolve_position($parser)

			ret($self)
		}
		List_node_set_to_twoended($statement, $self)
	}
}
fn Block_show($self)
{
	$a=$self.first
	if $a<0
	{
		logf("null")
	}
	else
	{
		begin_array()
			while 1
			{
				indent() $a.f.show($a)
				if $a.next<0
				{
					break
				}
					next_property()
				$a=$a.next
			}
		end_array()
	}
}
fn Block_remove($self)
{
	$a=$self.first while $a>=0
	{
		$next=$a.next
		$a.f.remove($a)
		$a=$next
	}

	remove($self)
}