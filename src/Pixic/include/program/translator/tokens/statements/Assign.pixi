/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/Assign.pixi
 * class Assign extends Statement;
 *
 * Include before.
 * program/translator/Parser.pixi
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens/operators.pixi
 * program/translator/tokens/show.pixi
 */

fn Assign_new($parser)
{
	$self=Statement_new($parser)
	$self.f=Assign

	Parser_promise_position($parser)
	$token=Parser_parse_operand($parser)
	if $token<0
	{
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	if !$token.assignable
	{
		$token.f.remove($token)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_resolve_position($parser)
	$self.variable=$token
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_operator($parser)
	}
	Parser_promise_position($parser)
	$token=0
	while 1
	{
		$token=Assign_new_jump0[-$token](Parser_get($parser), $parser)
		if $token>=0
		{
			break
		}
	}
	if $token!=INT_MAX
	{
		Parser_resolve_position($parser)
		$self.operator=$token
		if Parser_skip_spaces($parser)
		{
			$parser[1, $parser.top]-1
			syntax_error_expected_expression($parser)
		}
		$token=Parser_parse_expression($parser)
		if $token<0
		{
			syntax_error_expected_expression($parser)
		}
		$self.value=$token
		$self.last_line=$parser[1, $parser.top]+1

		ret($self)
	}
	Parser_reject_position($parser)
	syntax_error_expected_operator($parser)
}
Assign_new_jump0=clone(Parser_parse_expression_jump0)
Assign_new_jump0[5]=
{
	if $1!='='
	{
		Parser_reject_position($2)
		ret(OPERATOR_ASSIGN)
	}
	Parser_resolve_position($2)
	ret(OPERATOR_EQ)
}
Assign=new(1, 1, INT8)
Assign.generate=Assign_generate
Assign.show=Assign_show
Assign.remove=Assign_remove
fn Assign_generate($self)
{
	Statement_generate($self)
	$self.variable.f.generate_assign($self.variable, $self)
}
fn Assign_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Assign\"") next_property()
		indent() Statement_show($self) next_property()
		indent() logf("\"variable\": ") $self.variable.f.show($self.variable) next_property()
		indent() logf("\"operator\": \"%s\"", OPERATOR_STRING[$self.operator]) next_property()
		indent() logf("\"value\": ") $self.value.f.show($self.value)
	end_object()
}
fn Assign_remove($self)
{
	$self.variable.f.remove($self.variable)
	$self.value.f.remove($self.value)

	remove($self)
}