/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/If.pixi
 * class If extends Statement;
 *
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/translator/Parser.pixi
 * program/translator/tokens/keywords.pixi
 * program/translator/character filters.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens/statements/system/Block.pixi
 * program/translator/generator.pixi
 * program/info/developer errors.pixi
 * program/translator/tokens/show.pixi
 */

fn If_new($parser)
{
	$self=Statement_new($parser)
	$self.f=If

	Parser_promise_position($parser)
	$test=new(4, 1, INT8)
	clean($test)
	copy($test, $parser.text, 0, $parser[0, $parser.top])
	if strstr($test, KEYWORD_IF)
	{
		remove($test)
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	$parser[0, $parser.top]+2
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		remove($test)
		Parser_reject_position($parser)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_reject_position($parser)
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected_expression($parser)
	}
	$token=Parser_parse_expression($parser)
	if $token<0
	{
		syntax_error_expected_expression($parser)
	}
	$self.condition=$token
	$self.last_line=$parser[1, $parser.top]+1
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, '{')
	}
	$token=Block_new($parser)
	if $token<0
	{
		syntax_error_expected($parser, '{')
	}
	$self.then=$token
	Parser_promise_position($parser)
	if Parser_skip_spaces($parser)
	{
		remove($test)
		Parser_reject_position($parser)
		$self.else=-1

		ret($self)
	}
	clean($test)
	copy($test, $parser.text, 0, $parser[0, $parser.top])
	if strstr($test, KEYWORD_ELSE)
	{
		remove($test)
		Parser_reject_position($parser)
		$self.else=-2

		ret($self)
	}
	remove($test)
	$parser[0, $parser.top]+4
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		Parser_reject_position($parser)
		Parser_reject_position($parser)
		$self.else=-3

		ret($self)
	}
	Parser_reject_position($parser)
	Parser_resolve_position($parser)
	if Parser_skip_spaces($parser)
	{
		$parser[1, $parser.top]-1
		syntax_error_expected($parser, '{')
	}
	$token=Block_new($parser)
	if $token<0
	{
		syntax_error_expected($parser, '{')
	}
	$self.else=$token

	ret($self)
}
If=new(1, 1, INT8)
If.generate=If_generate
If.show=If_show
If.remove=If_remove
fn If_generate($self)
{
	generator_deinit()
	developer_error_not_implemented("\"if/else\" structure generation")
}
fn If_show($self)
{
	begin_object()
		indent() logf("\"type\": \"If\"") next_property()
		indent() Statement_show($self) next_property()
		indent() logf("\"condition\": ") $self.condition.f.show($self.condition) next_property()
		indent() logf("\"then\": ") Block_show($self.then)
		if $self.else>=0
		{
				next_property()
			indent() logf("\"else\": ") Block_show($self.else)
		}
	end_object()
}
fn If_remove($self)
{
	$self.condition.f.remove($self.condition)
	Block_remove($self.then)
	if $self.else>=0
	{
		Block_remove($self.else)
	}

	remove($self)
}