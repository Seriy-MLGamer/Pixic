/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/Continue.pixi
 * class Continue extends Statement;
 *
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/translator/Parser.pixi
 * program/translator/tokens/keywords.pixi
 * program/translator/character filters.pixi
 * program/translator/generator.pixi
 * program/info/developer errors.pixi
 * program/translator/tokens/show.pixi
 */

fn Continue_new($parser)
{
	$self=Statement_new($parser)
	$self.f=Continue

	Parser_promise_position($parser)
	$test=new(8, 1, INT8)
	clean($test)
	copy($test, $parser.text, 0, $parser[0, $parser.top])
	if strstr($test, KEYWORD_CONTINUE)
	{
		remove($test)
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}
	remove($test)
	$parser[0, $parser.top]+8
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		Parser_reject_position($parser)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_reject_position($parser)
	Parser_resolve_position($parser)

	ret($self)
}
Continue=new(1, 1, INT8)
Continue.generate=Continue_generate
Continue.show=Continue_show
Continue.remove=Continue_remove
fn Continue_generate($self)
{
	generator_deinit()
	developer_error_not_implemented("\"continue\" statement generation")
}
fn Continue_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Continue\"") next_property()
		indent() Statement_show($self)
	end_object()
}
fn Continue_remove($self)
{
	remove($self)
}