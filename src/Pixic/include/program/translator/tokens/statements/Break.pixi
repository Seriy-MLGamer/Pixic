/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/Break.pixi
 * class Break extends Statement;
 *
 * Dependencies.
 * program/translator/tokens/statements/system/Statement.pixi
 * program/translator/Parser.pixi
 * program/translator/tokens/keywords.pixi
 * program/translator/character filters.pixi
 * program/translator/generator.pixi
 * program/info/developer errors.pixi
 * program/translator/tokens/show.pixi
 */

fn Break_new($parser)
{
	$self=Statement_new($parser)
	$self.f=Break

	Parser_promise_position($parser)
	$test=new(8, 1, INT8)
	clean($test)
	copy($test, $parser.text, 0, $parser[0, $parser.top])
	if !strstr($test, KEYWORD_BREAKALL)
	{
		$self.stages=0
		$parser[0, $parser.top]+8
	}
	else{if !strstr($test, KEYWORD_BREAK2)
	{
		$self.stages=2
		$parser[0, $parser.top]+6
	}
	else{if !strstr($test, KEYWORD_BREAK3)
	{
		$self.stages=3
		$parser[0, $parser.top]+6
	}
	else{if !strstr($test, KEYWORD_BREAK4)
	{
		$self.stages=4
		$parser[0, $parser.top]+6
	}
	else{if !strstr($test, KEYWORD_BREAK)
	{
		$self.stages=1
		$parser[0, $parser.top]+5
	}
	else
	{
		remove($test)
		Parser_reject_position($parser)

		remove($self)
		ret(-1)
	}}}}}
	remove($test)
	Parser_promise_position($parser)
	if is_symbolic(Parser_get($parser))
	{
		Parser_reject_position($parser)
		Parser_reject_position($parser)

		remove($self)
		ret(-2)
	}
	Parser_reject_position($parser)
	Parser_resolve_position($parser)

	ret($self)
}
Break=new(1, 1, INT8)
Break.generate=Break_generate
Break.show=Break_show
Break.remove=Break_remove
fn Break_generate($self)
{
	generator_deinit()
	developer_error_not_implemented("\"break\" statement generation")
}
fn Break_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Break\"") next_property()
		indent() Statement_show($self) next_property()
		indent()
			$stages=$self.stages
			if $stages==1
			{
				logf("\"value\": \"break\"")
			}
			else{if $stages>=2
			{
				logf("\"value\": \"break%u\"", $stages)
			}
			else
			{
				logf("\"value\": \"breakall\"")
			}}
	end_object()
}
fn Break_remove($self)
{
	remove($self)
}