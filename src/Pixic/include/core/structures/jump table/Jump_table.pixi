/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file core/structures/jump table/Jump_table.pixi
 * class Jump_table;
 * The implementation of "switch case" in Pixilang that supports randomized case values.
 * Set the corresponding function or jump address to the case value (or something else, even float numbers).
 * There is no "switch case" and many other things in Pixilang, so I have to костылить.
 *
 * Dependencies.
 * core/structures/linked list/Linked_list.pixi
 * core/structures/linked list/List_node.pixi
 * core/structures/jump table/system/Jump.pixi
 */

MINIMUM_FILL_COEFFICIENT=.25
MAXIMUM_FILL_COEFFICIENT=.5

/**
 * class Jump_table;
 * The implementation of "switch case" in Pixilang that supports randomized case values.
 * Set the corresponding function or jump address to the case value (or something else, even float numbers).
 * There is no "switch case" and many other things in Pixilang, so I have to костылить.
 * @return an instance of the Jump_table class.
 * @see Jump_table_set()
 * @see Jump_table_get()
 * @see Jump_table_unset()
 * @see Jump_table_remove()
 */
fn Jump_table_new()
{
	$self=new(1, 1, INT8)

	$self.jumps=Linked_list_new(1/MINIMUM_FILL_COEFFICIENT)
	$self.jumps_count=0

	ret($self)
}
/**
 * Set the pair of the case value and the function or jump address to the Jump_table object or change an existing pair.
 * @param $self
 * @param $case the case value.
 * @param $address the function or jump address (or something else).
 * @see Jump_table_new()
 */
fn Jump_table_set($self, $case, $address)
{
	$jumps=$self.jumps
	if $self.jumps_count
	{
		$array_size=get_size($jumps)
		$jump=$case%$array_size
		for ($a=$jumps[$jump]; $a>=0; $a=$a.next)
		{
			if $a.case==$case
			{
				$a.address=$address
				ret
			}
		}
		$jumps_count=$self.jumps_count
		$jumps_count_incremented=$jumps_count+1
		$self.jumps_count=$jumps_count_incremented
		if $jumps_count_incremented/$array_size>=MAXIMUM_FILL_COEFFICIENT
		{
			$array_size=floor($jumps_count_incremented/MINIMUM_FILL_COEFFICIENT)
			$new_jumps=Linked_list_new($array_size)
			for ($a=0; $jumps_count; $a+1)
			{
				$b=$jumps[$a] while $b>=0
				{
					$next=$b.next
					List_node_set_to_oneended($b, $new_jumps, $b.case%$array_size)
					$jumps_count-1
					$b=$next
				}
			}
			remove($jumps)
			$self.jumps=$new_jumps
			$jump=$case%$array_size
		}
		List_node_set_to_oneended(Jump_new($case, $address), $self.jumps, $jump)
	}
	else
	{
		$jumps[$case%get_size($jumps)]=Jump_new($case, $address)
		$self.jumps_count=1
	}
}
/**
 * Get a function or jump address of the case.
 * @param $self
 * @param $case the case value.
 * @return a function or jump address or 0 if the case not found.
 * @see Jump_table_new()
 */
fn Jump_table_get($self, $case)
{
	if $self.jumps_count
	{
		for ($a=$self.jumps[$case%get_size($self.jumps)]; $a>=0; $a=$a.next)
		{
			if $a.case==$case
			{
				ret($a.address)
			}
		}
	}
	ret(0)
}
/**
 * Remove the pair of the case value and a function or jump address from the Jump_table object.
 * @param $self
 * @param $case the case value.
 * @see Jump_table_new()
 */
fn Jump_table_unset($self, $case)
{
	$jumps_count=$self.jumps_count
	if $jumps_count
	{
		$jumps=$self.jumps
		$jump=$case%get_size($jumps)
		for ($a=$jumps[$jump]; $a>=0; $a=$a.next)
		{
			if $a.case==$case
			{
				$jumps_count-1
				$self.jumps_count=$jumps_count
				if $jumps_count
				{
					List_node_unset_from_oneended($a, $jumps, $jump)
					if $jumps_count/get_size($jumps)<MINIMUM_FILL_COEFFICIENT
					{
						$array_size=floor(($jumps_count+1)/MAXIMUM_FILL_COEFFICIENT)
						$new_jumps=Linked_list_new($array_size)
						for ($a=0; $jumps_count; $a+1)
						{
							$b=$jumps[$a] while $b>=0
							{
								$next=$b.next
								List_node_set_to_oneended($b, $new_jumps, $b.case%$array_size)
								$jumps_count-1
								$b=$next
							}
						}
						remove($jumps)
						$self.jumps=$new_jumps
					}
				}
				else
				{
					$jumps[$jump]=-1
				}
				remove($a)
				ret
			}
		}
	}
}
/**
 * Remove the Jump_table object.
 * @param $self
 * @see Jump_table_new()
 */
fn Jump_table_remove($self)
{
	$jumps_count=$self.jumps_count
	if $jumps_count
	{
		$jumps=$self.jumps
		for ($a=0; $jumps_count; $a+1)
		{
			$b=$jumps[$a] while $b>=0
			{
				$next=$b.next
				remove($b)
				$jumps_count-1
				$b=$next
			}
		}
	}
	remove($self.jumps)

	remove($self)
}