/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file core/structures/linked list/List_node.pixi
 * class List_node;
 * The structure of nodes of Linked_list and Twoended_list objects. Has two directions: "prev" and "next" fields.
 * Caution! Methods of this class are optimized by the cost of safety.
 */

/**
 * class List_node;
 * The structure of nodes of Linked_list and Twoended_list objects. Has two directions: "prev" and "next" fields.
 * Caution! Methods of this class are optimized by the cost of safety.
 * @return an instance of the List_node class.
 * @see List_node_set_to_oneended()
 * @see List_node_set_to_twoended()
 * @see List_node_unset_from_oneended()
 * @see List_node_unset_from_twoended()
 * @see Linked_list_new()
 * @see Twoended_list_new()
 */
fn List_node_new()
{
	$self=new(1, 1, INT8)

	$self.prev=-1
	$self.next=-1

	ret($self)
}
/**
 * Set the node to the Linked_list object.
 * Caution! This method is optimized by the cost of safety. Make sure that the node doesn't be in a Linked_list or Twoended_list object.
 * @param $self
 * @param $list the Linked_list object.
 * @param $index the index of the Linked_list object array. Optional. Default is 0.
 * @see List_node_set_to_twoended()
 * @see List_node_new()
 */
fn List_node_set_to_oneended($self, $list, $index)
{
	$self.prev=-1
	if $0<3
	{
		$start=$list[0]
		if $start>=0
		{
			$start.prev=$self
		}
		$self.next=$start
		$list[0]=$self
	}
	else
	{
		$start=$list[$index]
		if $start>=0
		{
			$start.prev=$self
		}
		$self.next=$start
		$list[$index]=$self
	}
}
/**
 * Set the node to the Twoended_list object.
 * Caution! This method is optimized by the cost of safety. Make sure that the node doesn't be in a Linked_list or Twoended_list object.
 * @param $self
 * @param $list the Twoended_list object.
 * @see List_node_set_to_oneended()
 * @see List_node_new()
 */
fn List_node_set_to_twoended($self, $list)
{
	$self.next=-1
	$last=$list.last
	if $last<0
	{
		$list.first=$self
	}
	else
	{
		$last.next=$self
	}
	$self.prev=$last
	$list.last=$self
}
/**
 * Unset the node from the Linked_list object.
 * Caution! This method is optimized by the cost of safety. Make sure that the node is added to the specified Linked_list object. This method doesn't reset "prev" and "next" fields.
 * @param $self
 * @param $list the Linked_list object.
 * @param $index the index of the Linked_list object array. Optional. Default is 0.
 * @see List_node_unset_from_twoended()
 * @see List_node_new()
 */
fn List_node_unset_from_oneended($self, $list, $index)
{
	$prev=$self.prev
	$next=$self.next
	if $prev>=0
	{
		$prev.next=$next
	}
	else{if $0<3
	{
		$list[0]=$next
	}
	else
	{
		$list[$index]=$next
	}}
	if $next>=0
	{
		$next.prev=$prev
	}
}
/**
 * Unset the node from the Twoended_list object.
 * Caution! This method is optimized by the cost of safety. Make sure that the node is added to the specified Twoended_list object. This method doesn't reset "prev" and "next" fields.
 * @param $self
 * @param $list the Twoended_list object.
 * @see List_node_unset_from_oneended()
 * @see List_node_new()
 */
fn List_node_unset_from_twoended($self, $list)
{
	$prev=$self.prev
	$next=$self.next
	if $prev<0
	{
		$list.first=$next
	}
	else
	{
		$prev.next=$next
	}
	if $next<0
	{
		$list.last=$prev
	}
	else
	{
		$next.prev=$prev
	}
}