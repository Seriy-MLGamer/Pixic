/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file core/strings/file name.pixi
 * The functions to operate with file path strings.
 *
 * Dependencies.
 * configuration.pixi
 */

/**
 * Removes unused slashes from the path and replaces them to operating system default slashes.
 * @param $path the string with the file or folder path. Will be modified.
 * @return 0 on success, or 1 on negative $path, or 2 on empty path.
 */
fn format_path($path)
{
	if $path<0
	{
		ret(1)
	}
	$pointer=0
	$slashes=0
	for ($a=0; $path[$a]; $a+1)
	{
		$character=$path[$a]
		if $slashes
		{
			if $character!='/'&&$character!='\\'
			{
				$slashes=0
				$path[$pointer]=$character
				$pointer+1
			}
		}
		else
		{
			if $character!='/'&&$character!='\\'
			{
				$path[$pointer]=$character
			}
			else
			{
				if SHELL==SHELL_BASH
				{
					$path[$pointer]='/'
				}
				else{if SHELL==SHELL_CMD
				{
					$path[$pointer]='\\'
				}}
				$slashes=1
			}
			$pointer+1
		}
	}
	if $pointer
	{
		$path[$pointer]=0
		ret(0)
	}
	ret(2)
}
/**
 * Get a file or folder name with an extension from the file or folder path.
 * @param $path the string with the file or folder path.
 * @return a new string with a file or folder name (remove it with remove()), or -1 on negative $path, or -2 on invalid or empty path.
 * @see get_file_name()
 * @see get_file_extension()
 */
fn get_full_file_name($path)
{
	if $path<0
	{
		ret(-1)
	}
	$result=clone($path)
	$a=strlen($result)-1 while !($result[$a]!='/'&&$result[$a]!='\\')
	{
		$a-1
	}
	if $a!=-1
	{
		resize($result, $a+1)
		while $a!=-1&&$result[$a]!='/'&&$result[$a]!='\\'
		{
			$a-1
		}
		if $a!=-1
		{
			$a+1
			copy($result, $result, 0, $a)
			resize($result, get_size($result)-$a)
		}
		$result.full_file_name=1
		ret($result)
	}
	remove($result)
	ret(-2)
}
/**
 * Get a file or folder name without extension from the file or folder path.
 * @param $path the string with the file or folder path.
 * @return a new string with a file or folder name (remove it with remove()), or -1 on negative $path, or -2 on invalid or empty path.
 * @see get_full_file_name()
 */
fn get_file_name($path)
{
	if $path<0
	{
		ret(-1)
	}
	if $path.full_file_name
	{
		$result=clone($path)
	}
	else
	{
		$result=get_full_file_name($path)
		if $result<0
		{
			ret($result)
		}
	}
	$end=get_size($result)-1
	$a=$end while $a&&$result[$a]!='.'
	{
		$a-1
	}
	if $a&&$a!=$end
	{
		resize($result, $a)
	}
	ret($result)
}
/**
 * Get an extension of file or folder name from the file or folder path.
 * @param $path the string with the file or folder path.
 * @return a new string with a file or folder name (remove it with remove()), or -1 on negative $path, or -2 on invalid or empty path, or -3, if there is no extension.
 * @see get_full_file_name()
 */
fn get_file_extension($path)
{
	if $path<0
	{
		ret(-1)
	}
	if $path.full_file_name
	{
		$result=clone($path)
	}
	else
	{
		$result=get_full_file_name($path)
		if $result<0
		{
			ret($result)
		}
	}
	$end=get_size($result)-1
	$a=$end while $a&&$result[$a]!='.'
	{
		$a-1
	}
	if $a&&$a!=$end
	{
		$a+1
		copy($result, $result, 0, $a)
		resize($result, $end+1-$a)
		ret($result)
	}
	remove($result)
	ret(-3)
}
/**
 * The standard get_real_path() function gets a path relative to path of booted Pixi-program. This function gets it relative to working folder of Pixilang interpreter.
 * @param $path the file or folder path.
 * @return a new string with real file or folder path (remove it with remove()).
 */
fn get_real_path2($path)
{
	$start=$path[0]
	if ($start<'A'||$start>'Z')&&($start<'a'||$start>'z')||$path[1]!=':'&&$start!='/'&&$start!='\\'
	{
		$result=clone(WORK_PATH)
		strcat($result, $path)
		ret($result)
	}
	else
	{
		ret(clone($path))
	}
}