/*
(C) 2022-2023 Серый MLGamer. All freedoms preserved.
Videos at Дзен: <https://dzen.ru/seriy_mlgamer>
Music at SoundCloud: <https://soundcloud.com/seriy_mlgamer>
Videos at YouTube: <https://www.youtube.com/@Seriy_MLGamer>
Code at GitHub: <https://github.com/Seriy-MLGamer>
Me at ВКонтакте: <https://vkontakte.ru/seriy_mlgamer>
Material support at DonationAlerts: <https://www.donationalerts.com/r/seriy_mlgamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file core/encodings/UTF8_file.pixi
 * class UTF8_file;
 * The class operating with streams of text in the UTF-8 encoding. Operates with both files and containers.
 */

UTF8_ERROR=-2

/**
 * class UTF8_file;
 * The class operating with streams of text in the UTF-8 encoding. Operates with both files and containers.
 * @param $filename the name of the file with the text in the UTF-8 encoding.
 * @param $mode the mode of a stream. Supports only "r" and "rb" modes.
 * @return an instance of the UTF8_file class or -1 on error.
 * @see UTF8_file_new2()
 * @see UTF8_file_get()
 * @see UTF8_file_remove()
 */
fn UTF8_file_new($filename, $mode)
{
	$file=fopen($filename, $mode)
	if $file
	{
		$self=new(1, 1, INT8)

		$self.file=$file
		$self.position=0

		ret($self)
	}
	ret(-1)
}
/**
 * class UTF8_file;
 * The class operating with streams of text in the UTF-8 encoding. Operates with both files and containers.
 * @param $text_container the container with the text in the UTF-8 encoding (container of the INT8 type).
 * @param $mode the mode of a stream. Supports only "r" and "rb" modes.
 * @return an instance of the UTF8_file class or -1 on error.
 * @see UTF8_file_new()
 * @see UTF8_file_get()
 * @see UTF8_file_remove()
 */
fn UTF8_file_new2($text_container, $mode)
{
	$file=fopen_mem($text_container, $mode)
	if $file
	{
		$self=new(1, 1, INT8)

		$self.file=$file
		$self.position=0

		ret($self)
	}
	ret(-1)
}
/*fn UTF8_file_put($self, $character)
{
	$file=$self.file
	if $character!=EOF&&$character!=UTF8_ERROR
	{
		if $character<0x00000080
		{
			fputc($character, $file)
		}
		else{if $character<0x00000800
		{
			fputc($character>>6&0x1F|0xC0, $file)
			fputc($character&0x3F|0x80, $file)
		}
		else{if $character<0x00010000
		{
			fputc($character>>12&0x0F|0xE0, $file)
			fputc($character>>6&0x3F|0x80, $file)
			fputc($character&0x3F|0x80, $file)
		}
		else{if $character<0x00011000
		{
			fputc(symbol>>18&0x07|0xF0, $file)
			fputc(symbol>>12&0x3F|0x80, $file)
			fputc(symbol>>6&0x3F|0x80, $file)
			fputc(symbol&0x3F|0x80, $file)
		}
		else
		{
			ret(1)
		}}}}
		$self.position+1
		ret(0)
	}
	ret(2)
}*/
//fn UTF8_file_put_LE($self, $character)
/**
 * Get a character from the stream.
 * @param $self
 * @return an Unicode character, or EOF, if the end of file is reached, or UTF8_ERROR on error in data format of the stream.
 * @see UTF8_file_new()
 * @see UTF8_file_new2()
 */
fn UTF8_file_get($self)
{
	$file=$self.file
	$return_on_error=ftell($file)
	$character=fgetc($file)
	if $character==EOF
	{
		$self.position+1
		ret(EOF)
	}
	if ($character&0x80)==0x00
	{
		$self.position+1
		ret($character)
	}
	if ($character&0xC0)==0x80
	{
		$buffer=new(3, 1, INT8)
		$buffer[0]=$character&0x3F
		for ($a=1; $a!=4; $a+1)
		{
			$character=fgetc($file)
			if ($character&0xC0)==0x80&&$a!=3
			{
				$buffer[$a]=$character&0x3F
			}
			else{if ($character&0xE0)==0xC0&&$a==1
			{
				$self.position+1
				remove($buffer)
				ret(($character&0x1F)<<6|$buffer[0])
			}
			else{if ($character&0xF0)==0xE0&&$a==2
			{
				$self.position+1
				remove($buffer)
				ret(($character&0x0F)<<12|$buffer[1]<<6|$buffer[0])
			}
			else{if ($character&0xF8)==0xF0&&$a==3
			{
				$character=($character&0x07)<<18
				for ($b=2; $b!=-1; $b-1)
				{
					$character|$buffer[$b]<<6*$b
				}
				$self.position+1
				remove($buffer)
				ret($character)
			}
			else
			{
				fseek($file, $return_on_error, SEEK_SET)
				remove($buffer)
				ret(UTF8_ERROR)
			}}}}
		}
	}
	if ($character&0xE0)==0xC0
	{
		$result=($character&0x1F)<<6
		$character=fgetc($file)
		if ($character&0xC0)!=0x80
		{
			fseek($file, -2, SEEK_CUR)
			ret(UTF8_ERROR)
		}
		$self.position+1
		ret($character&0x3F|$result)
	}
	if ($character&0xF0)==0xE0
	{
		$result=($character&0x0F)<<12
		$character=fgetc($file)
		if ($character&0xC0)!=0x80
		{
			fseek($file, -2, SEEK_CUR)
			ret(UTF8_ERROR)
		}
		$result|($character&0x3F)<<6
		$character=fgetc($file)
		if ($character&0xC0)!=0x80
		{
			fseek($file, -3, SEEK_CUR)
			ret(UTF8_ERROR)
		}
		$self.position+1
		ret($character&0x3F|$result)
	}
	if ($character&0xF8)==0xF0
	{
		$result=($character&0x07)<<18
		for ($a=2; $a!=-1; $a-1)
		{
			$character=fgetc($file)
			if ($character&0xC0)!=0x80
			{
				fseek($file, $return_on_error, SEEK_SET)
				ret(UTF8_ERROR)
			}
			$result|($character&0x3F)<<6*$a
		}
		$self.position+1
		ret($result)
	}
	ret(UTF8_ERROR)
}
/**
 * Remove the UTF8_file object.
 * @param $self
 * @see UTF8_file_new()
 * @see UTF8_file_new2()
 */
fn UTF8_file_remove($self)
{
	fclose($self.file)

	remove($self)
}